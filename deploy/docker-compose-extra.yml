services:
  # Kafka connect.
  kafka-connect:
    profiles: [ "kafka-connect",
                "demo-debezium-mysql", "demo-snowflake-sink", "demo-debezium-jdbc",
                "demo-debezium-postgres" ]
    image: ghcr.io/feldera/kafka-connect:${FELDERA_VERSION:-latest}
    build:
      context: ../
      dockerfile: deploy/Dockerfile.kafka-connect
    depends_on:
      redpanda:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: "redpanda:9092"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "inventory.configs"
      OFFSET_STORAGE_TOPIC: "inventory.offset"
      STATUS_STORAGE_TOPIC: "inventory.status"
      LOG_LEVEL: "ERROR"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --request GET --url http://localhost:8083/"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL container with a toy database used in the Debezium
  # MySQL tutorial (based on MySQL 8.0).
  mysql:
    profiles: [ "mysql",
                "demo-debezium-mysql" ]
    image: debezium/example-mysql:2.5
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: debezium
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: mysqlpw
    healthcheck:
      test: ["CMD-SHELL", "mysql -h 127.0.0.1 -u $$MYSQL_USER -p$$MYSQL_PASSWORD -e 'USE inventory;'"]
      interval: 5s
      timeout: 5s
      # MySQL can be _very_ slow to start.
      retries: 40

  # Postgres container for testing Debezium JDBC sink connector.
  postgres:
    profiles: [ "postgres",
                "demo-debezium-jdbc", "demo-debezium-postgres" ]
    image: debezium/example-postgres:2.5
    ports:
      # Make sure that port numbers don't clash with the pipeline manager DB.
      - "6432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
