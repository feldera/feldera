services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pipeline-manager:
    tty: true
    image: ghcr.io/feldera/pipeline-manager:${FELDERA_VERSION:-0.1.6}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    stop_grace_period: 0s
    environment:
      - RUST_BACKTRACE=1
      - REDPANDA_BROKERS=redpanda:9092
      - RUST_LOG=info,actix_web=error,tokio_postgres=info
      - AUTH_CLIENT_ID
      - AUTH_ISSUER
    command:
      - --db-connection-string=postgresql://postgres:postgres@db:5432
      - --use-auth=${USE_AUTH:-false}
    healthcheck:
      # TODO: add `/status` endpoint.
      test:
        [
          "CMD-SHELL",
          "curl --fail --request GET --url http://localhost:8080/v0/pipelines"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redpanda:
    profiles: [ "demo", "debezium" ]
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 2G
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # enable logs for debugging.
      # - --default-log-level=debug
    image: docker.redpanda.com/vectorized/redpanda:v23.2.3
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  demo:
    profiles: [ "demo" ]
    depends_on:
      pipeline-manager:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    image: ghcr.io/feldera/demo-container:${FELDERA_VERSION:-0.1.6}
    environment:
      - RUST_BACKTRACE=1
      - REDPANDA_BROKERS=redpanda:9092
      - SECOPS_DEMO_ARGS
      - RUST_LOG=info

    # Run the demos after giving the service some time to initialize
    # Start the two demos in parallel.  Compilation will still happen serially, but
    # this way the user will see the two programs and pipelines straight away.
    # Make sure the script returns an error if one of the demo scripts fails.
    command:
      - bash
      - -c
      - |
        sleep 1
        (cd demo/project_demo00-SecOps && python3 run.py --dbsp_url http://pipeline-manager:8080 --actions prepare create compile $${SECOPS_DEMO_ARGS})&
        pid1=$$!
        echo pid1 $$pid1
        (cd demo/project_demo06-SupplyChainTutorial && python3 run.py --dbsp_url http://pipeline-manager:8080 --actions prepare create compile)&
        pid2=$$!
        wait $$pid1
        status1=$$?
        echo SecOps demo script exited with status $$status1
        wait $$pid2
        status2=$$?
        echo SupplyChainTutorial demo script exited with status $$status2
        if [ $$status1 -ne 0 ]; then exit $$status1; fi
        if [ $$status2 -ne 0 ]; then exit $$status2; fi
