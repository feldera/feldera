============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/runner/work/feldera/feldera/python
configfile: pyproject.toml
plugins: timeout-2.4.0, xdist-3.8.0
timeout: 600.0s
timeout method: signal
timeout func_only: False
created: 24/24 workers
24 workers [8 items]

EEEEEEFE                                                                 [100%]
==================================== ERRORS ====================================
_____________________ ERROR at setup of test_pipeline_post _____________________
[gw0] linux -- Python 3.12.3 /home/runner/work/feldera/feldera/python/.venv/bin/python

request = <SubRequest 'pipeline_name' for <Function test_pipeline_post>>

    @pytest.fixture(name="pipeline_name")
    def fixture_pipeline_name(request):
        # Use the test node name (or request.function.__name__) to seed uniqueness
        name = unique_pipeline_name(request.function.__name__)
>       cleanup_pipeline(name)

tests/conftest.py:10:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/platform/helper.py:184: in cleanup_pipeline
    reset_pipeline(name)
tests/platform/helper.py:173: in reset_pipeline
    if get_pipeline(name).status_code != HTTPStatus.OK:
       ^^^^^^^^^^^^^^^^^^
tests/platform/helper.py:75: in get_pipeline
    return get(f"{API_PREFIX}/pipelines/{name}")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/platform/helper.py:71: in get
    return http_request("GET", path, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/platform/helper.py:60: in http_request
    headers = kwargs.pop("headers", None) or _base_headers()
                                             ^^^^^^^^^^^^^^^
tests/platform/helper.py:39: in _base_headers
    token = oidc_helper.obtain_access_token()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tests.platform.oidc_test_helper.OidcTestHelper object at 0x7f3cbc0cfe00>

    def obtain_access_token(self) -> str:
        """
        Obtain access token using Resource Owner Password Flow
        Returns cached token if still valid
        """
        logger = logging.getLogger(__name__)

        # Check if we have a cached token that's still valid (with 30s buffer)
        if self._access_token and time.time() < self._token_expires_at - 30:
            logger.info("Using cached access token")
            logger.debug(f"Cached token (first 20 chars): {self._access_token[:20]}...")
            return self._access_token

        token_endpoint = self.get_token_endpoint()
        logger.info(f"Requesting new access token from: {token_endpoint}")

        data = {
            "grant_type": "password",
            "username": self.config.username,
            "password": self.config.password,
            "client_id": self.config.client_id,
            "client_secret": self.config.client_secret,
            "scope": self.config.scope,
            "audience": "feldera-api",
        }

        # Log request details (without sensitive data)
        logger.info(f"Token request - username: {self.config.username}")
        logger.info(f"Token request - client_id: {self.config.client_id}")
        logger.info(f"Token request - scope: {self.config.scope}")
        logger.info("Token request - audience: feldera-api")

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
        }

        response = requests.post(token_endpoint, data=data, headers=headers, timeout=30)

        if not response.ok:
            logger.error(f"Token request failed: {response.status_code}")
            logger.error(f"Response headers: {dict(response.headers)}")
            logger.error(f"Response body: {response.text}")
>           raise Exception(
                f"Token request failed: {response.status_code} - {response.text}"
            )
E           Exception: Token request failed: 401 - {"error":"access_denied","error_description":"Unauthorized"}

tests/platform/oidc_test_helper.py:133: Exception
------------------------------ Captured log setup ------------------------------
ERROR    tests.platform.oidc_test_helper:oidc_test_helper.py:130 Token request failed: 401
ERROR    tests.platform.oidc_test_helper:oidc_test_helper.py:131 Response headers: {'Date': 'Mon, 15 Sep 2025 15:16:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '60', 'Connection': 'keep-alive', 'Server': 'cloudflare', 'CF-Ray': '97f9157b6a5a6ba3-DFW', 'CF-Cache-Status': 'DYNAMIC', 'Cache-Control': 'private, no-store, no-cache, must-revalidate, post-check=0, pre-check=0, no-transform', 'Set-Cookie': 'did=s%3Av0%3A58307e9d-e87c-49bc-9707-b4d60d5b9ed6.pfD4bEhN7sNbInEjy3Msp0ffdnzsmgjEoDTlxTimYRs; Path=/; Expires=Tue, 15 Sep 2026 21:16:12 GMT; HttpOnly; Secure; SameSite=None, did_compat=s%3Av0%3A58307e9d-e87c-49bc-9707-b4d60d5b9ed6.pfD4bEhN7sNbInEjy3Msp0ffdnzsmgjEoDTlxTimYRs; Path=/; Expires=Tue, 15 Sep 2026 21:16:12 GMT; HttpOnly; Secure', 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains', 'Vary': 'Origin, Accept-Encoding', 'X-Auth0-L': '0.037', 'X-Auth0-RequestId': 'fdb13d6d264ace0ac86c', 'X-Content-Type-Options': 'nosniff', 'X-RateLimit-Limit': '100', 'X-RateLimit-Remaining': '91', 'X-RateLimit-Reset': '1757949374', 'alt-svc': 'h3=":443"; ma=86400'}
ERROR    tests.platform.oidc_test_helper:oidc_test_helper.py:132 Response body: {"error":"access_denied","error_description":"Unauthorized"}
____________ ERROR at setup of test_pipeline_create_compile_delete _____________
[gw3] linux -- Python 3.12.3 /home/runner/work/feldera/feldera/python/.venv/bin/python

request = <SubRequest 'pipeline_name' for <Function test_pipeline_create_compile_delete>>

    @pytest.fixture(name="pipeline_name")
    def fixture_pipeline_name(request):
        # Use the test node name (or request.function.__name__) to seed uniqueness
        name = unique_pipeline_name(request.function.__name__)
>       cleanup_pipeline(name)

tests/conftest.py:10:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests/platform/helper.py:184: in cleanup_pipeline
    reset_pipeline(name)
tests/platform/helper.py:173: in reset_pipeline
    if get_pipeline(name).status_code != HTTPStatus.OK:
       ^^^^^^^^^^^^^^^^^^
tests/platform/helper.py:75: in get_pipeline
    return get(f"{API_PREFIX}/pipelines/{name}")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/platform/helper.py:71: in get
    return http_request("GET", path, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/platform/helper.py:60: in http_request
    headers = kwargs.pop("headers", None) or _base_headers()
                                             ^^^^^^^^^^^^^^^
tests/platform/helper.py:39: in _base_headers
    token = oidc_helper.obtain_access_token()
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tests.platform.oidc_test_helper.OidcTestHelper object at 0x7fa00effc3b0>

    def obtain_access_token(self) -> str:
        """
        Obtain access token using Resource Owner Password Flow
        Returns cached token if still valid
        """
        logger = logging.getLogger(__name__)

        # Check if we have a cached token that's still valid (with 30s buffer)
        if self._access_token and time.time() < self._token_expires_at - 30:
            logger.info("Using cached access token")
            logger.debug(f"Cached token (first 20 chars): {self._access_token[:20]}...")
            return self._access_token

        token_endpoint = self.get_token_endpoint()
        logger.info(f"Requesting new access token from: {token_endpoint}")

        data = {
            "grant_type": "password",
            "username": self.config.username,
            "password": self.config.password,
            "client_id": self.config.client_id,
            "client_secret": self.config.client_secret,
            "scope": self.config.scope,
            "audience": "feldera-api",
        }

        # Log request details (without sensitive data)
        logger.info(f"Token request - username: {self.config.username}")
        logger.info(f"Token request - client_id: {self.config.client_id}")
        logger.info(f"Token request - scope: {self.config.scope}")
        logger.info("Token request - audience: feldera-api")

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
        }

        response = requests.post(token_endpoint, data=data, headers=headers, timeout=30)

        if not response.ok:
            logger.error(f"Token request failed: {response.status_code}")
            logger.error(f"Response headers: {dict(response.headers)}")
            logger.error(f"Response body: {response.text}")
>           raise Exception(
                f"Token request failed: {response.status_code} - {response.text}"
            )
E           Exception: Token request failed: 401 - {"error":"access_denied","error_description":"Unauthorized"}

tests/platform/oidc_test_helper.py:133: Exception
------------------------------ Captured log setup ------------------------------
ERROR    tests.platform.oidc_test_helper:oidc_test_helper.py:130 Token request failed: 401
ERROR    tests.platform.oidc_test_helper:oidc_test_helper.py:131 Response headers: {'Date': 'Mon, 15 Sep 2025 15:16:12 GMT', 'Content-Type': 'application/json', 'Content-Length': '60', 'Connection': 'keep-alive', 'Server': 'cloudflare', 'CF-Ray': '97f9157b6e57476d-DFW', 'CF-Cache-Status': 'DYNAMIC', 'Cache-Control': 'private, no-store, no-cache, must-revalidate, post-check=0, pre-check=0, no-transform', 'Set-Cookie': 'did=s%3Av0%3A832a5516-dfcb-43ba-bbb5-6454863690ae.oBFfmpRUkCsnmUVVo%2FlTNsTsLHOvy3thoixULn1l2Mk; Path=/; Expires=Tue, 15 Sep 2026 21:16:12 GMT; HttpOnly; Secure; SameSite=None, did_compat=s%3Av0%3A832a5516-dfcb-43ba-bbb5-6454863690ae.oBFfmpRUkCsnmUVVo%2FlTNsTsLHOvy3thoixULn1l2Mk; Path=/; Expires=Tue, 15 Sep 2026 21:16:12 GMT; HttpOnly; Secure', 'Strict-Transport-Security': 'max-age=31536000; includeSubDomains', 'Vary': 'Origin, Accept-Encoding', 'X-Auth0-L': '0.033', 'X-Auth0-RequestId': 'ea3e69e89b2df84d52a7', 'X-Content-Type-Options': 'nosniff', 'X-RateLimit-Limit': '100', 'X-RateLimit-Remaining': '90', 'X-RateLimit-Reset': '1757949374', 'alt-svc': 'h3=":443"; ma=86400'}
ERROR    tests.platform.oidc_test_helper:oidc_test_helper.py:132 Response body: {"error":"access_denied","error_description":"Unauthorized"}