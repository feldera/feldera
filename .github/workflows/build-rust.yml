name: Build Rust Sources

on:
  workflow_call:

env:
  CARGO_FLAGS: "--release --locked --all-targets --features pubsub-emulator-test,iceberg-tests-fs,iceberg-tests-glue"
  FELDERA_PLATFORM_VERSION_SUFFIX: ${{ github.sha }}
  RUSTC_WRAPPER: sccache
  SCCACHE_DIR: /sccache
  BLACKSMITH_SCCACHE_DISK: /mnt/sccache-disk

jobs:
  build-rust:
    name: Build Rust Binaries

    # We run this on two different architectures (x86_64 and aarch64)
    strategy:
      matrix:
        include:
          - runner: [self-hosted, skylake40]
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            sccache_size: 1024G
          - runner: blacksmith-16vcpu-ubuntu-2204-arm
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            sccache_size: 50G
    runs-on: ${{ matrix.runner }}

    container:
      image: ghcr.io/feldera/feldera-dev:3012ef118aaaa2b7d49e1dfeda938288a70ba66c
      options: --user=ubuntu --privileged
      volumes:
        - /sccache:/sccache
      env:
        VM_ID: ${{ env.VM_ID }}
        GITHUB_REPO_NAME: ${{ env.GITHUB_REPO_NAME }}
        BLACKSMITH_STICKYDISK_TOKEN: ${{ env.BLACKSMITH_STICKYDISK_TOKEN }}
        BLACKSMITH_INSTALLATION_MODEL_ID: ${{ env.BLACKSMITH_INSTALLATION_MODEL_ID }}
        BLACKSMITH_REGION: ${{ env.BLACKSMITH_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # We can't put it in /sccache because it's a volume mount already in the self-hosted runner
      - name: Figure out sccache directory path on blacksmith runner
        if: ${{ startsWith(matrix.runner, 'blacksmith') }}
        run: |
          sudo mkdir -p ${{ env.BLACKSMITH_SCCACHE_DISK }}
          sudo chown ubuntu:ubuntu -R ${{ env.BLACKSMITH_SCCACHE_DISK }}
          echo "SCCACHE_DIR=${{ env.BLACKSMITH_SCCACHE_DISK }}/sccache" >> $GITHUB_ENV
      - name: Mount sccache directory on blacksmith runner
        if: ${{ startsWith(matrix.runner, 'blacksmith') }}
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-sccache
          path: ${{ env.BLACKSMITH_SCCACHE_DISK }}

      - name: Set sccache size environment variable
        run: |
          echo "SCCACHE_CACHE_SIZE=${{ matrix.sccache_size }}" >> $GITHUB_ENV

      # The docker container when executed in the action runs with a different home directory
      # than we set in the dev container (?), hence this step is necessary (sigh)
      # https://github.com/actions/runner/issues/863
      - name: Rustup set default toolchain
        run: rustup default stable

      - name: Build Rust binaries
        run: |
          cargo build ${{ env.CARGO_FLAGS }} --target=${{ matrix.target }}

      - name: Print sccache stats
        run: |
          sccache --show-stats

      # Get list of executables
      - name: Collect executables
        id: collect
        run: |
          # Run again with --message-format=json to list out executables
          # (No real recompile since nothing has changed).
          # Then transform newlines to spaces for the artifact step.
          EXES=$(cargo build ${{ env.CARGO_FLAGS }} --target=${{ matrix.target }} --message-format=json \
            | jq -r '.executable | select(. != null)' | tr '\n' ' ')
          echo "Found executables: $EXES"
          # Save it as an output variable for subsequent steps
          echo "executables=$EXES" >> $GITHUB_OUTPUT

      # Copy all executables into a single directory because upload-artifact does not support
      # multiple paths or `|` in glob patterns
      - name: Copy executables
        run: |
          mkdir -p build-artifacts
          for exe in ${{ steps.collect.outputs.executables }}; do
            cp "$exe" build-artifacts/
          done
          mkdir -p build-release-artifacts
          # Move the executables we ship to users to a separate directory
          mv build-artifacts/fda build-release-artifacts/
          mv build-artifacts/pipeline-manager build-release-artifacts/

      # Upload test binaries as one artifact
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: feldera-test-binaries-${{ matrix.target }}
          path: build-artifacts
          retention-days: 7

      # Upload binaries to run the product as another artifact
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: feldera-binaries-${{ matrix.target }}
          path: build-release-artifacts
          retention-days: 7
