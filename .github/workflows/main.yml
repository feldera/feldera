name: Rust

on:
  schedule:
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: "same_content_newer"
          skip_after_successful_duplicate: "true"
          paths_ignore: '["**/README.md", "**/doc/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

  tests:
    name: Build on other platforms
    needs: [pre_job]
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4

      matrix:
        # We test the following targets:
        # - 64bit MacOS stable
        # - 64bit Windows stable
        include:
          - {
              rust: stable,
              target: x86_64-apple-darwin,
              os: macos-latest,
              cargo_args: --workspace,
              test_flags: --skip kafka,
            }
          - {
              rust: stable,
              target: x86_64-pc-windows-msvc,
              os: windows-latest,
              cargo_args: -p dbsp -p dbsp_adapters -p pipeline-manager,
              test_flags: --skip kafka,
            }
          # `rdkafka` doesn't compile on 32-bit Windows.
          # - { rust: stable, target: i686-pc-windows-msvc, os: windows-latest }
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          default: true

      - name: Restore cache
        uses: Swatinem/rust-cache@v1
        # Don't cache on Windows due to low disk space
        if: runner.os != 'Windows'

      # We split building the tests into a separate step
      # so that we can easily distinguish between build
      # errors and failing tests
      - name: Install openssl using vcpkg
        if: runner.os == 'Windows'
        run: vcpkg install openssl:x64-windows-static-md

      - name: Install openssl using vcpkg
        if: runner.os == 'Windows'
        run: vcpkg integrate install

      - name: Build tests with all features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.cargo_args }} --no-run --all-features --target ${{ matrix.target }}

      - name: Build tests with no features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.cargo_args }} --no-run --no-default-features --target ${{ matrix.target }}

  links:
    name: Check Doc Links
    runs-on: ubuntu-latest
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true

      - name: Restore cache
        uses: Swatinem/rust-cache@v1

      - name: Check links
        uses: actions-rs/cargo@v1
        env:
          RUSTRDOCFLAGS: "-D warnings --cfg docsrs"
        with:
          command: doc
          args: --workspace --all-features
