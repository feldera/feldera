#!/usr/bin/env python3

import fileinput
import sys

metrics = {}
for line in fileinput.input(encoding='utf-8'):
    comment, keyword, name, args = line.strip().split(maxsplit=3)
    if comment == '#' and keyword in ['TYPE', 'HELP']:
        metrics.setdefault(name, {})[keyword] = args

print("""<!-- This file is automatically generated.  Do not edit!

To regenerate this file, start a Feldera pipeline (any one will do)
and obtain Prometheus metrics for it with, for example, `fda metrics
--format=prometheus` or `curl https://server/v0/metrics`, then run
`metrics.py` from the same directory as this, like so:

metrics.py < metrics.txt > metrics.md
-->

# Metrics

This reference lists all of the metrics that Feldera exports through
its `/metrics` endpoint in [Prometheus exposition format].  It is
automatically generated using the documentation embedded in Prometheus
output.

All of the metrics exported by a particular Feldera pipeline are
labeled with the pipeline's UUID as `pipeline`.  Some metrics have
additional labels, as documented below.

[Prometheus exposition format]: https://prometheus.io/docs/instrumenting/exposition_formats

""")

def document_section(name, heading):
    print(heading.strip())
    print()

    section_metrics = sorted([key for key in metrics.keys() if key.startswith(f"{name}_")])
    assert section_metrics != []
    print("| Name | Type | Description |")
    print("| :--- | :--- | :---------- |")
    for metric in section_metrics:
        type_ = metrics[metric]['TYPE']
        help = metrics[metric]['HELP']
        print(f"| `{metric}` |{type_} | {help} |")
        del metrics[metric]
    print()

document_section("process", """## Process Metrics

These metrics report statistics for a running Feldera pipeline
process.  When a pipeline process is killed and restarts from a
checkpoint, the new process's metrics are for it alone, not cumulative
with any previous instantiations.

These metrics are intended to match the standard [Prometheus
definitions].

[Prometheus definitions]: https://prometheus.io/docs/instrumenting/writing_clientlibs/#process-metrics""")

document_section("feldera", """## Feldera metrics

These metrics report statistics for Feldera operations.""")

document_section("dbsp", """## DBSP metrics

These metrics report statistics for [DBSP], the low-level mechanism on
which Feldera is built.

[DBSP]: https://docs.rs/dbsp/latest/dbsp/""")

document_section("records", """## Record Processing

These metrics report the status of record input, processing, and
output as a whole.  They are maintained consistently across checkpoint
and resume.

""")

document_section("storage", """## Storage Performance

These metrics report the performance of storage, which allows Feldera
to work with data larger than memory.""")

document_section("pipeline", """## Pipeline Status

These metrics report the status of the pipeline.

""")

document_section("input_connector", """## Input Connectors

These metrics are per-input connector, labeled with `endpoint` set to
the name of the input connector, which is either the name assigned in
the SQL program or automatically generated as `unnamed-<number>`,
where `<number>` is 1 for the first connector for a given table, 2 for
the second, and so on.""")

document_section("output_connector", """## Output Connectors

These metrics are per-output connector, labeled with `endpoint` set to
the name of the output connector, which is either the name assigned in
the SQL program or automatically generated as `unnamed-<number>`,
where `<number>` is 1 for the first connector for a given view,
2 for the second, and so on.""")

document_section("compaction", """## Merge Status

These metrics reports the status of the merger.
""")

document_section("output_buffered", """## Output Batches

These metrics report output buffering status.""")

document_section("files", """## File metrics

These report use of files within Feldera storage.""")

if len(metrics) > 0:
    sys.stderr.write(f"error: the following metrics need documentation sections: {metrics.keys()}\n")
    sys.exit(1)
