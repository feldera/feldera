import { page } from '$app/state'
import { nonNull } from '$lib/functions/common/function'
import jp from 'jsonpath'
import semverSort from 'semver/functions/sort'

let latestVersion: string | undefined = $state()

export type LatestVersionSource = {
  url:
    | string
    | {
        hostname?: string
        pathname?: string
      }
  requestInit?: Pick<RequestInit, 'body' | 'method' | 'mode'> & {
    headers?: [string, string][] | Record<string, string>
  }
  resultJsonpath: string
  resultRegex?: string
  asJsonpath?: string
}[]

const fetchLatestVersion = async (
  fetch: typeof globalThis.fetch,
  recipe: LatestVersionSource | undefined
) => {
  if (!recipe) {
    // return undefined
    return '0.39.0'
  }
  let result = [] as string[]
  for (const step of recipe) {
    let res = await fetch(
      typeof step.url === 'string'
        ? step.url
        : (step.url.hostname ?? '') + (step.url.pathname ?? ''),
      step.requestInit
    ).then((response) => response.json())
    if (step.resultJsonpath) {
      res = jp.query(res, step.resultJsonpath)
    } else {
      res = [res]
    }
    if (step.resultRegex) {
      res = res
        .map((r: any) =>
          typeof r === 'string' ? new RegExp(step.resultRegex!).exec(r)?.[1] : undefined
        )
        .filter(nonNull)
    }
    if (step.asJsonpath && nonNull(res[0])) {
      recipe = jp.value(recipe, step.asJsonpath, res[0])
      continue
    }
    if (res.some((r: any) => typeof r !== 'string')) {
      throw new Error('Could not fetch the latest version: unexpected configuration')
    }
    result = res
  }
  return semverSort(result).at(-1)
}

export const useLatestVersion = (fetch: typeof globalThis.fetch) => {
  const recipe = page.data.latestVersionSource
  return {
    async fetchLatestVersion() {
      latestVersion = await fetchLatestVersion(fetch, recipe)
    },
    get latestVersion() {
      return latestVersion
    }
  }
}
