{
  "calcite_plan": {
    "error_view": {
      "rels": [
        {
          "id": 0,
          "relOp": "LogicalTableScan",
          "table": [
            "schema",
            "feldera_error_table"
          ],
          "inputs": []
        }
      ]
    },
    "fibonacci": {
      "rels": [
        {
          "id": 1,
          "relOp": "LogicalValues",
          "type": [
            {
              "type": "INTEGER",
              "nullable": false,
              "name": "n"
            },
            {
              "type": "INTEGER",
              "nullable": false,
              "name": "value"
            }
          ],
          "tuples": [
            [
              {
                "literal": 0,
                "type": {
                  "type": "INTEGER",
                  "nullable": false
                }
              },
              {
                "literal": 0,
                "type": {
                  "type": "INTEGER",
                  "nullable": false
                }
              }
            ],
            [
              {
                "literal": 1,
                "type": {
                  "type": "INTEGER",
                  "nullable": false
                }
              },
              {
                "literal": 1,
                "type": {
                  "type": "INTEGER",
                  "nullable": false
                }
              }
            ]
          ],
          "inputs": []
        },
        {
          "id": 2,
          "relOp": "LogicalTableScan",
          "table": [
            "schema",
            "fibonacci-decl"
          ],
          "inputs": []
        },
        {
          "id": 3,
          "relOp": "LogicalFilter",
          "condition": {
            "op": {
              "name": "<",
              "kind": "LESS_THAN",
              "syntax": "BINARY"
            },
            "operands": [
              {
                "input": 0,
                "name": "$0"
              },
              {
                "literal": 10,
                "type": {
                  "type": "INTEGER",
                  "nullable": false
                }
              }
            ]
          },
          "inputs": [
            2
          ]
        },
        {
          "id": 4,
          "relOp": "LogicalProject",
          "fields": [
            "n",
            "value",
            "$f2"
          ],
          "exprs": [
            {
              "input": 0,
              "name": "$0"
            },
            {
              "input": 1,
              "name": "$1"
            },
            {
              "op": {
                "name": "-",
                "kind": "CHECKED_MINUS",
                "syntax": "BINARY"
              },
              "operands": [
                {
                  "input": 0,
                  "name": "$0"
                },
                {
                  "literal": 1,
                  "type": {
                    "type": "INTEGER",
                    "nullable": false
                  }
                }
              ]
            }
          ],
          "inputs": [
            2
          ]
        },
        {
          "id": 5,
          "relOp": "LogicalFilter",
          "condition": {
            "op": {
              "name": "<",
              "kind": "LESS_THAN",
              "syntax": "BINARY"
            },
            "operands": [
              {
                "input": 0,
                "name": "$0"
              },
              {
                "literal": 10,
                "type": {
                  "type": "INTEGER",
                  "nullable": false
                }
              }
            ]
          },
          "inputs": [
            4
          ]
        },
        {
          "id": 6,
          "relOp": "LogicalJoin",
          "condition": {
            "op": {
              "name": "=",
              "kind": "EQUALS",
              "syntax": "BINARY"
            },
            "operands": [
              {
                "input": 0,
                "name": "$0"
              },
              {
                "input": 4,
                "name": "$4"
              }
            ]
          },
          "joinType": "inner",
          "inputs": [
            3,
            5
          ]
        },
        {
          "id": 7,
          "relOp": "LogicalProject",
          "fields": [
            "n",
            "value"
          ],
          "exprs": [
            {
              "op": {
                "name": "+",
                "kind": "CHECKED_PLUS",
                "syntax": "BINARY"
              },
              "operands": [
                {
                  "input": 0,
                  "name": "$0"
                },
                {
                  "literal": 1,
                  "type": {
                    "type": "INTEGER",
                    "nullable": false
                  }
                }
              ]
            },
            {
              "op": {
                "name": "+",
                "kind": "CHECKED_PLUS",
                "syntax": "BINARY"
              },
              "operands": [
                {
                  "input": 1,
                  "name": "$1"
                },
                {
                  "input": 3,
                  "name": "$3"
                }
              ]
            }
          ],
          "inputs": [
            6
          ]
        },
        {
          "id": 8,
          "relOp": "LogicalUnion",
          "all": true,
          "inputs": [
            1,
            7
          ]
        }
      ]
    }
  },
  "mir": {
    "s0": {
      "operation": "constant",
      "inputs": [],
      "calcite": {
        "partial": 0
      },
      "positions": [
        {"start_line_number":4,"start_column":1,"end_line_number":4,"end_column":59}
      ],
      "persistent_id": "8b384059bdb44ad811ab341cc5e2a59697f39aac7b463cab027b185db8105e73"
    }, "s1": {
      "operation": "constant",
      "inputs": [],
      "calcite": {
        "final": 1
      },
      "positions": [],
      "persistent_id": "e9e603b5a475449d82c084ee3f2223d4ad6f9a6ae5cc4a4726a90ff15f98faa3"
    }, "s2": {
      "operation": "nested",
      "outputs": [
        { "node": "s9", "output": 0 }
      ],
      "s3": {
        "operation": "Z",
        "inputs": [],
        "table": "fibonacci-decl",
        "backedges": [{ "node": "s9", "output": 0 }],
        "calcite": {
          "final": 2
        },
        "positions": [],
        "persistent_id": "1cad9022fb9400950c4b4a4d9aaf96ca4433f989b896a5147b0e3335d900fe21"
      },
      "s4": {
        "operation": "flat_map_index",
        "inputs": [
          { "node": "s3", "output": 0 }
        ],
        "calcite": {
          "seq": [
            {
              "final": 3
            },{
              "partial": 6
            }]
        },
        "positions": [
          {"start_line_number":19,"start_column":8,"end_line_number":19,"end_column":26},
          {"start_line_number":20,"start_column":27,"end_line_number":20,"end_column":37}
        ],
        "persistent_id": "c4a85bf710dd3401e8c109627ff19a982d7ac56502679cd4ccc751868d929416"
      },
      "s5": {
        "operation": "flat_map_index",
        "inputs": [
          { "node": "s3", "output": 0 }
        ],
        "calcite": {
          "seq": [
            {
              "final": 4
            },{
              "final": 5
            },{
              "partial": 6
            }]
        },
        "positions": [
          {"start_line_number":19,"start_column":17,"end_line_number":19,"end_column":26},
          {"start_line_number":20,"start_column":11,"end_line_number":20,"end_column":21}
        ],
        "persistent_id": "04ab9bc2922e5e848f6cb7939658e97c4e2c150331bd0654ed8d98cd85427191"
      },
      "s6": {
        "operation": "delta0",
        "inputs": [
          { "node": "s1", "output": 0 }
        ],
        "calcite": {
          "final": 8
        },
        "positions": [],
        "persistent_id": "8b83b99ecbf96b0bbffaeae18470c5efa7b1dcef5c2feec4745bf6fc8dc7d622"
      },
      "s7": {
        "operation": "map",
        "inputs": [
          { "node": "s6", "output": 0 }
        ],
        "calcite": {
          "partial": 8
        },
        "positions": [
          {"start_line_number":4,"start_column":1,"end_line_number":21,"end_column":1}
        ],
        "persistent_id": "a23759b38be0410a39b1b73fd91da4565b91fc171378a89c4ccc721695f34526"
      },
      "s8": {
        "operation": "join",
        "inputs": [
          { "node": "s4", "output": 0 },
          { "node": "s5", "output": 0 }
        ],
        "calcite": {
          "partial": 6
        },
        "positions": [
          {"start_line_number":15,"start_column":9,"end_line_number":15,"end_column":18},
          {"start_line_number":16,"start_column":9,"end_line_number":16,"end_column":33},
          {"start_line_number":19,"start_column":8,"end_line_number":19,"end_column":26}
        ],
        "persistent_id": "181d7b128313b90121fa9cff13307d45ac1537762a0e02b5b8a12a9f916432a5"
      },
      "s9": {
        "operation": "sum",
        "inputs": [
          { "node": "s7", "output": 0 },
          { "node": "s8", "output": 0 }
        ],
        "calcite": {
          "final": 8
        },
        "positions": [],
        "persistent_id": "12fceaa21c74975e1a38537e3ef1fd55730170e9af62e522daff6f2a65cc9244"
      }
    }, "s10": {
      "operation": "inspect",
      "inputs": [
        { "node": "s2", "output": 0 }
      ],
      "view": "fibonacci",
      "calcite": {
        "final": 8
      },
      "positions": [
        {"start_line_number":4,"start_column":1,"end_line_number":21,"end_column":1},
        {"start_line_number":4,"start_column":1,"end_line_number":21,"end_column":1}
      ],
      "persistent_id": "bc00b1b56804974a549e5827f4152c910dbdbfd3f97eecd126dc69898bed7c6b"
    }, "s11": {
      "operation": "inspect",
      "inputs": [
        { "node": "s0", "output": 0 }
      ],
      "view": "error_view",
      "calcite": {
        "final": 0
      },
      "positions": [
        {"start_line_number":4,"start_column":1,"end_line_number":4,"end_column":59},
        {"start_line_number":4,"start_column":1,"end_line_number":4,"end_column":59}
      ],
      "persistent_id": "933ebf782e1fe804fe85c4d0f3688bdb5234b386c2834892776e692acd9781d9"
    }
  },
  "sources": [
    "DECLARE RECURSIVE view fibonacci(n INT, value INT);",
    "create table input (x int);",
    "",
    "create view fibonacci AS",
    "(",
    "    -- Base case: first two Fibonacci numbers",
    "    select 0 as n, 0 as value",
    "    union all",
    "    select 1 as n, 1 as value",
    ")",
    "union all",
    "(",
    "    -- Compute F(n)=F(n-1)+F(n-2)",
    "    select",
    "        prev.n + 1 as n,",
    "        (prev.value + curr.value) as value",
    "    from fibonacci as curr",
    "    join fibonacci as prev",
    "    on prev.n = curr.n - 1",
    "    where curr.n < 10 and prev.n < 10",
    ");"
  ]
}