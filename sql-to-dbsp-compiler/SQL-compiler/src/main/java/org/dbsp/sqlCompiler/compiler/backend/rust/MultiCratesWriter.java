package org.dbsp.sqlCompiler.compiler.backend.rust;

import org.dbsp.sqlCompiler.circuit.DBSPCircuit;
import org.dbsp.sqlCompiler.circuit.DBSPDeclaration;
import org.dbsp.sqlCompiler.circuit.annotation.CompactName;
import org.dbsp.sqlCompiler.circuit.operator.DBSPOperator;
import org.dbsp.sqlCompiler.compiler.DBSPCompiler;
import org.dbsp.sqlCompiler.compiler.errors.CompilationError;
import org.dbsp.sqlCompiler.compiler.errors.UnimplementedException;
import org.dbsp.sqlCompiler.ir.IDBSPInnerNode;
import org.dbsp.sqlCompiler.ir.IDBSPNode;
import org.dbsp.util.Utilities;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;

/** This class helps generate Rust code.
 * It is given a set of circuit and functions and generates a code in multiple crates. */
public class MultiCratesWriter extends RustWriter {
    public final String outputDirectory;

    public MultiCratesWriter(String outputDirectory) {
        this.outputDirectory = outputDirectory;
    }

    File rootDirectory() {
        File file = new File(this.outputDirectory);
        if (!file.exists() || !file.isDirectory())
            throw new CompilationError("Output directory does not exist " +
                    Utilities.singleQuote(this.outputDirectory));
        Utilities.deleteContents(file);
        return file;
    }

    @Override
    public void setPrintStream(PrintStream stream) {
        throw new UnimplementedException();
    }

    public void add(IDBSPNode circuit) {
        this.toWrite.add(circuit);
    }

    @Override
    public void write(DBSPCompiler compiler) throws IOException {
        StructuresUsed used = this.analyze(compiler);
        File rootDirectory = this.rootDirectory();
        File cargo = new File(rootDirectory, CrateGenerator.CARGO);
        PrintStream cargoStream = new PrintStream(Files.newOutputStream(cargo.toPath()));
        cargoStream.println("# Automatically generated by sql-to-dbsp");
        cargoStream.println("[workspace]");
        cargoStream.println("members = [");

        CircuitWriter mainWriter = new CircuitWriter();
        RustFileWriter typesWriter = new RustFileWriter().withUdf(false);
        CrateGenerator main = new CrateGenerator(rootDirectory, "main", mainWriter);
        CrateGenerator types = new CrateGenerator(rootDirectory, "types", typesWriter);
        main.addDependency(types);

        typesWriter.setUsed(used);
        cargoStream.println("   " + Utilities.doubleQuote(types.crateName) + ",");
        for (IDBSPNode node: this.toWrite) {
            if (node.is(IDBSPInnerNode.class))
                types.add(node);
            else {
                DBSPCircuit circuit = node.to(DBSPCircuit.class);
                main.add(node);
                // Move all declarations to the types crate as inner nodes
                for (DBSPDeclaration decl: circuit.declarations)
                    types.add(decl.item);
                circuit.declarationMap.clear();
                circuit.declarations.clear();
                for (DBSPOperator operator: circuit.allOperators) {
                    String name = CompactName.getCompactName(operator);
                    assert name != null;
                    SingleOperatorWriter single = new SingleOperatorWriter(circuit);
                    CrateGenerator op = new CrateGenerator(rootDirectory, name, single);
                    op.addDependency(types);
                    op.add(operator);
                    main.addDependency(op);
                    op.write(compiler);
                }
            }
        }
        types.write(compiler);
        main.write(compiler);

        cargoStream.println("   " + Utilities.doubleQuote(main.crateName));
        cargoStream.println("]");

        cargoStream.println("""
                [patch.crates-io]
                datafusion = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-common = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-expr = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-functions = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-functions-aggregate = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-physical-expr = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-physical-plan = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-proto = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }
                datafusion-sql = { git = "https://github.com/ryzhyk/datafusion.git", rev = "f561db7" }""");

        cargoStream.close();
    }
}
