package org.dbsp.sqlCompiler.compiler.backend.rust.multi;

import org.dbsp.sqlCompiler.circuit.DBSPCircuit;
import org.dbsp.sqlCompiler.circuit.annotation.CompactName;
import org.dbsp.sqlCompiler.circuit.operator.DBSPOperator;
import org.dbsp.sqlCompiler.circuit.operator.DBSPSimpleOperator;
import org.dbsp.sqlCompiler.circuit.operator.DBSPSourceBaseOperator;
import org.dbsp.sqlCompiler.circuit.operator.DBSPViewBaseOperator;
import org.dbsp.sqlCompiler.compiler.DBSPCompiler;
import org.dbsp.sqlCompiler.compiler.backend.rust.BaseRustCodeGenerator;
import org.dbsp.sqlCompiler.compiler.backend.rust.ToRustInnerVisitor;

import java.io.IOException;

/** Code generator for a circuit which instantiates each operator using a function call
 * generated by a {@link SingleOperatorWriter}. */
public final class CircuitWriter extends BaseRustCodeGenerator {
    private void processOperator(DBSPOperator node) {
        DBSPOperator op = node.to(DBSPOperator.class);
        String name = op.getNodeName(BaseRustCodeGenerator.USE_HASH_NAMES);
        if (!node.is(DBSPViewBaseOperator.class)) {
            this.getOutputStream().append("let ");
            this.getOutputStream().append(name)
                    .append(" = ");
        }
        this.getOutputStream().append("create_")
                .append(name)
                .append("(&circuit, &mut catalog, ");
        for (var input: op.inputs) {
            if (input.isSimpleNode()) {
                DBSPSimpleOperator simple = input.simpleNode();
                name = simple.getNodeName(BaseRustCodeGenerator.USE_HASH_NAMES);
                this.getOutputStream().append("&")
                        .append(name)
                        .append(",");
            }
        }
        this.getOutputStream().append(");").newline();
    }

    @Override
    public void write(DBSPCompiler compiler) throws IOException {
        assert this.outputStream != null;
        this.outputStream.append(COMMON_PREAMBLE);
        this.outputStream.append(STANDARD_PREAMBLE);
        this.outputStream.append(ALLOC_PREAMBLE);
        for (String dep: this.dependencies)
            this.outputStream.append("use ").append(dep).append("::*;");
        assert this.toWrite.size() == 1;
        DBSPCircuit circuit = this.toWrite.get(0).to(DBSPCircuit.class);
        ToRustInnerVisitor inner = new ToRustInnerVisitor(compiler, this.getOutputStream(), false);
        this.getOutputStream().append("pub fn ")
                .append(circuit.getName())
                .append("Catalog");

        this.getOutputStream()
                .append("(cconf: CircuitConfig) -> Result<(DBSPHandle, Catalog), Error> {")
                .increase()
                .newline()
                .append("let (circuit, streams) = Runtime::init_circuit(cconf, |circuit| {")
                .increase();
        this.getOutputStream().append("let mut catalog = Catalog::new();").newline();

        // Process sources first
        for (DBSPOperator node : circuit.getAllOperators())
            if (node.is(DBSPSourceBaseOperator.class))
                this.processOperator(node);

        for (DBSPOperator node : circuit.getAllOperators())
            if (!node.is(DBSPSourceBaseOperator.class))
                this.processOperator(node);

        this.getOutputStream().append("Ok(catalog)");
        this.getOutputStream().newline()
                .decrease()
                .append("})?;")
                .newline();
        this.getOutputStream()
                .append("Ok((circuit, streams))")
                .newline()
                .decrease()
                .append("}")
                .newline();
    }
}
