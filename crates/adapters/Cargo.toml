[package]
name = "dbsp_adapters"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"
description = "Data adapters for continuous streaming data analytics with DBSP"
homepage = "https://github.com/feldera/feldera"
repository = "https://github.com/feldera/feldera"
keywords = ["DBSP", "streaming", "analytics", "database"]
categories = ["database", "api-bindings", "network-programming"]
publish = false

[features]
default = ["with-kafka", "with-deltalake", "with-iceberg", "with-avro", "with-nexmark", "with-pubsub"]
with-kafka = ["rdkafka"]
with-deltalake = ["deltalake"]
with-iceberg = ["feldera-iceberg"]
with-pubsub = ["google-cloud-pubsub", "google-cloud-gax"]
with-avro = ["apache-avro", "schema_registry_converter", "feldera-adapterlib/with-avro"]
with-nexmark = ["dbsp_nexmark"]
# Run delta table tests against an S3 bucket.  Requires S3 authentication key
# to be provided via an environment variable.
delta-s3-test = []
# Run Pub/Sub connector tests agains an emulator.
# The emulator must be running. See `pubsub/test.rs`.
pubsub-emulator-test = []
# Run Pub/Sub connector tests agains a GCP account.
# Google Cloud Application Default Credentials (ADC) must be configured. See `pubsub/test.rs`.
pubsub-gcp-test = []
feldera-enterprise = []
iceberg-tests-fs = []
iceberg-tests-glue = []
iceberg-tests-rest = []

[dependencies]
feldera-types = { path = "../feldera-types" }
feldera-adapterlib = { path = "../adapterlib" }
feldera-datagen = { path = "../datagen" }
feldera-iceberg = { path = "../iceberg", optional = true }
awc = { version = "3.1.1", default-features = false, features = ["compress-gzip", "compress-brotli", "cookies", "rustls-0_23-webpki-roots"] }
async-stream = "0.3.5"
anyhow = { version = "1.0.57", features = ["backtrace"] }
circular-queue = { version = "0.2.6", features = ["serde_support"] }
crossbeam = "0.8.2"
dbsp = { path = "../dbsp" }
serde = { version = "1.0", features = ["derive", "rc"] }
erased-serde = "0.3.23"
once_cell = "1.9.0"
serde_yaml = "0.9.14"
serde_json = { version = "1.0.127", features = ["raw_value"] }
serde_urlencoded = "0.7.1"
form_urlencoded = "1.2.0"
csv = "1.2.2"
# cmake-build is required on Windows.
rdkafka = { version = "0.37.0", features = ["cmake-build", "ssl-vendored", "gssapi-vendored", "zstd", "libz"], optional = true }
aws-sdk-s3 = { version = "1.17.0", features = ["behavior-version-latest"] }
aws-types = "1.1.7"
actix = "0.13.1"
actix-web = { version = "4.4.0", default-features = false, features = ["cookies", "macros", "compress-gzip", "compress-brotli"] }
mime = "0.3.16"
size-of = { version = "0.1.5", package = "feldera-size-of", features = ["time-std", "ordered-float"], optional = true }
futures = { version = "0.3.28" }
futures-util = { version = "0.3.28" }
proptest = { version = "1.5.0", optional = true }
proptest-derive = { version = "0.5.0", optional = true }
clap = { version = "4.0.32", features = ["derive"] }
tokio = { version = "1.25.0", features = ["sync", "macros", "fs", "rt"] }
utoipa = "4.1"
chrono = { version = "0.4.38", features = ["rkyv-64", "serde"] }
colored = "2.0.0"
uuid = { version = "1.11.0", features = ["v4", "std"] }
# Make sure this is the same rustls version used by the `tonic` crate.
# See the `ensure_default_crypto_provider` function at the root of this crate.
rustls = "0.23.12"
rkyv = { version = "0.7.45", default-features = false, features = ["std", "size_64"] }
csv-core = "0.1.10"
rand = { version = "0.8.5", features = ["small_rng"] }
regex = "1.10.2"
tempfile = "3.10.0"
async-trait = "0.1"
arrow = { version = "53.3.0", features = ["chrono-tz"] }
parquet = { version = "53.3.0", features = ["json"] }
serde_arrow = { version = "0.12.2", features = ["arrow-53"] }
arrow-json = { version = "53.3.0" }
bytes = "1.5.0"
# `datafusion` must be enabled for the writer to implement the `Invariant` feature.
deltalake = { version = "=0.22.2", features = ["datafusion", "s3", "gcs", "azure"], optional = true }
apache-avro = { version = "0.17.0", optional = true }
schema_registry_converter = { version = "4.2.0", features = ["avro", "blocking"], optional = true }
rust_decimal = { package = "feldera_rust_decimal", version = "1.33.1-feldera.1", features = ["tokio-pg"] }
url = "2.5.0"
# Make sure to match metrics version in dbsp to include them!
metrics = "0.23"
metrics-util = "0.17"
metrics-exporter-prometheus = "0.15.1"
ordered-float = { version = "4.2.0", features = ["serde"] }
minitrace = { version = "0.6", features = ["enable"] }
minitrace-jaeger = { version = "0.6" }
atomic = "0.6.0"
dbsp_nexmark = { path = "../nexmark", features = [], optional = true }
enum-map = "2.7.3"
google-cloud-pubsub = { version = "0.29.1", optional = true }
google-cloud-gax = { version = "0.19.1", optional = true}
tokio-util = "0.7.11"
home = "0.5.9"
datafusion = { version = "43" }
sha2 = "0.10.8"
indexmap = "2.6.0"
rmp-serde = "1.3.0"
rmpv = { version = "1.3.0", features = ["with-serde"] }
serde_bytes = "0.11.15"
governor = "0.7.0"
nonzero_ext = "0.3.0"
xxhash-rust = { version = "0.8.6", features = ["xxh3"] }
tracing = "0.1.40"
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
comfy-table = "7.1.3"
tokio-postgres = { version = "0.7", features = ["with-serde_json-1", "with-uuid-1", "with-chrono-0_4"]}

[target.'cfg(target_os = "linux")'.dependencies]
jemalloc_pprof = "0.1.0"

[target.'cfg(any(target_os = "macos", target_os = "linux"))'.dependencies]
psutil = "3.2.2"

[dev-dependencies]
actix-test = "0.1.1"
bstr = { version = "0.2.1", features = ["serde1"] }
serde_json = "1.0.127"
size-of = { version = "0.1.5", package = "feldera-size-of", features = ["time-std", "ordered-float"] }
tempfile = "3.3.0"
proptest = "1.5.0"
proptest-derive = "0.5.0"
futures = "0.3.30"
bytestring = "1.2.0"
actix-codec = "0.5.0"
async-stream = "0.3.5"
futures-timer = "3.0.2"
test_bin = "0.4.0"
reqwest = { version = "0.11.20", features = ["blocking"] }
serial_test = "2.0.0"
rust_decimal_macros = "1.32"
mockall = "0.12.1"
pretty_assertions = "1.4.0"
feldera-sqllib = { path = "../sqllib" }
num-bigint = "0.4.4"
google-cloud-googleapis = "0.15.0"
