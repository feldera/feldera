{
  "openapi": "3.0.3",
  "info": {
    "title": "Feldera API",
    "description": "\nWith Feldera, users create data pipelines out of SQL programs and data connectors.\nA SQL program comprises tables and views.\nConnectors feed data to input tables in a program or receive outputs computed by views.\n\nThis API allows users to create and manage pipelines.\n\n* *Pipeline*.  A pipeline is a running instance of a program and\nsome attached connectors. A client can create multiple pipelines that make use of\nthe same program and connectors. Every pipeline has a unique name and identifier.\nDeploying a pipeline instantiates the pipeline with the then latest version of\nthe referenced program and connectors. This allows the API to accumulate edits\nto programs and connectors before use in a pipeline.\n\n# Concurrency\n\nAll programs have an associated *version*. This is done to prevent\nrace conditions due to multiple users accessing the same\nprogram concurrently.  An example is user 1 modifying the program,\nwhile user 2 is starting a pipeline for the same program. It would be confusing\nif the pipeline could end up running the old or the new version.\n\nA version is a monotonically increasing number, associated with each\nprogram and pipeline. Every request to compile the program or start a\npipeline must include the program id and version number. If the version number\nisn't equal to the current version in the database, this means that the\nlast version of the program observed by the client is outdated, so the\nrequest is rejected.",
    "license": {
      "name": "MIT OR Apache-2.0"
    },
    "version": "0.22.0"
  },
  "paths": {
    "/config/authentication": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get authentication provider configuration",
        "operationId": "get_config_authentication",
        "responses": {
          "200": {
            "description": "The response body contains Authentication Provider configuration, or is empty if no auth is configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProvider"
                }
              }
            }
          },
          "500": {
            "description": "Request failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v0/api_keys": {
      "get": {
        "tags": [
          "API keys"
        ],
        "summary": "List all API keys",
        "operationId": "list_api_keys",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "API key name",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API keys retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyDescr"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Specified API key name does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Unknown API key name": {
                    "value": {
                      "details": {
                        "name": "unknown_api_key"
                      },
                      "error_code": "UnknownApiKey",
                      "message": "Unknown API key 'unknown_api_key'"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      },
      "post": {
        "tags": [
          "API keys"
        ],
        "summary": "Create an API key",
        "operationId": "create_api_key",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewApiKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API key created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewApiKeyResponse"
                }
              }
            }
          },
          "409": {
            "description": "An api key with this name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": null,
                  "error_code": "DuplicateName",
                  "message": "An entity with this name already exists"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/api_keys/{api_key_name}": {
      "get": {
        "tags": [
          "API keys"
        ],
        "summary": "Get an API key description",
        "operationId": "get_api_key",
        "parameters": [
          {
            "name": "api_key_name",
            "in": "path",
            "description": "Unique API key name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyDescr"
                }
              }
            }
          },
          "404": {
            "description": "Specified API key name does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Unknown API key name": {
                    "value": {
                      "details": {
                        "name": "unknown_api_key"
                      },
                      "error_code": "UnknownApiKey",
                      "message": "Unknown API key 'unknown_api_key'"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "API keys"
        ],
        "summary": "Delete an API key",
        "operationId": "delete_api_key",
        "parameters": [
          {
            "name": "api_key_name",
            "in": "path",
            "description": "Unique API key name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API key deleted successfully"
          },
          "404": {
            "description": "Specified API key name does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Unknown API key name": {
                    "value": {
                      "details": {
                        "name": "unknown_api_key"
                      },
                      "error_code": "UnknownApiKey",
                      "message": "Unknown API key 'unknown_api_key'"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/config/demos": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the list of demos.",
        "operationId": "get_config_demos",
        "responses": {
          "200": {
            "description": "List of demos.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Demo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to read demos from the demos directory.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "GET: retrieve list of pipelines.",
        "description": "Inclusion of program code is configured with by the `code` boolean query parameter.\nTODO: reference example?",
        "operationId": "list_pipelines",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Whether to include program code in the response (default: `true`).\nPassing `false` reduces the response size, which is particularly handy\nwhen frequently monitoring the endpoint over low bandwidth connections.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pipelines retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedPipelineDescr"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Pipelines"
        ],
        "summary": "POST: create a new pipeline.",
        "operationId": "post_pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineDescr"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Pipeline successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPipeline"
                },
                "example": {
                  "created_at": "1970-01-01T00:00:00Z",
                  "deployment_config": null,
                  "deployment_desired_status": "Shutdown",
                  "deployment_error": null,
                  "deployment_location": null,
                  "deployment_status": "Shutdown",
                  "deployment_status_since": "1970-01-01T00:00:00Z",
                  "description": "Description of the example pipeline",
                  "id": "67e55044-10b1-426f-9247-bb680e5fe0c8",
                  "name": "example",
                  "program_binary_url": null,
                  "program_code": "CREATE TABLE table1 ( col1 INT );",
                  "program_config": {
                    "profile": "optimized"
                  },
                  "program_schema": null,
                  "program_status": "Pending",
                  "program_status_since": "1970-01-01T00:00:00Z",
                  "program_version": 1,
                  "runtime_config": {
                    "cpu_profiler": false,
                    "max_buffering_delay_usecs": 0,
                    "min_batch_size_records": 0,
                    "min_storage_bytes": null,
                    "resources": {
                      "cpu_cores_max": null,
                      "cpu_cores_min": null,
                      "memory_mb_max": null,
                      "memory_mb_min": null,
                      "storage_class": null,
                      "storage_mb_max": null
                    },
                    "storage": false,
                    "tracing": false,
                    "tracing_endpoint_jaeger": "",
                    "workers": 16
                  },
                  "version": 1
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "GET: retrieve a pipeline.",
        "operationId": "get_pipeline",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPipelineDescr"
                },
                "example": {
                  "created_at": "1970-01-01T00:00:00Z",
                  "deployment_config": null,
                  "deployment_desired_status": "Shutdown",
                  "deployment_error": null,
                  "deployment_location": null,
                  "deployment_status": "Shutdown",
                  "deployment_status_since": "1970-01-01T00:00:00Z",
                  "description": "Description of the example pipeline",
                  "id": "67e55044-10b1-426f-9247-bb680e5fe0c8",
                  "name": "example",
                  "program_binary_url": null,
                  "program_code": "CREATE TABLE table1 ( col1 INT );",
                  "program_config": {
                    "profile": "optimized"
                  },
                  "program_schema": null,
                  "program_status": "Pending",
                  "program_status_since": "1970-01-01T00:00:00Z",
                  "program_version": 1,
                  "runtime_config": {
                    "cpu_profiler": false,
                    "max_buffering_delay_usecs": 0,
                    "min_batch_size_records": 0,
                    "min_storage_bytes": null,
                    "resources": {
                      "cpu_cores_max": null,
                      "cpu_cores_min": null,
                      "memory_mb_max": null,
                      "memory_mb_min": null,
                      "storage_class": null,
                      "storage_mb_max": null
                    },
                    "storage": false,
                    "tracing": false,
                    "tracing_endpoint_jaeger": "",
                    "workers": 16
                  },
                  "version": 1
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Pipelines"
        ],
        "summary": "PUT: if it does not exist, create a new pipeline, otherwise update existing pipeline.",
        "operationId": "put_pipeline",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineDescr"
              },
              "example": {
                "description": "Description of the example pipeline",
                "name": "example",
                "program_code": "CREATE TABLE table1 ( col1 INT );",
                "program_config": {
                  "profile": "optimized"
                },
                "runtime_config": {
                  "cpu_profiler": false,
                  "max_buffering_delay_usecs": 0,
                  "min_batch_size_records": 0,
                  "min_storage_bytes": null,
                  "resources": {
                    "cpu_cores_max": null,
                    "cpu_cores_min": null,
                    "memory_mb_max": null,
                    "memory_mb_min": null,
                    "storage_class": null,
                    "storage_mb_max": null
                  },
                  "storage": false,
                  "tracing": false,
                  "tracing_endpoint_jaeger": "",
                  "workers": 16
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pipeline successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPipeline"
                },
                "example": {
                  "created_at": "1970-01-01T00:00:00Z",
                  "deployment_config": null,
                  "deployment_desired_status": "Shutdown",
                  "deployment_error": null,
                  "deployment_location": null,
                  "deployment_status": "Shutdown",
                  "deployment_status_since": "1970-01-01T00:00:00Z",
                  "description": "Description of the example pipeline",
                  "id": "67e55044-10b1-426f-9247-bb680e5fe0c8",
                  "name": "example",
                  "program_binary_url": null,
                  "program_code": "CREATE TABLE table1 ( col1 INT );",
                  "program_config": {
                    "profile": "optimized"
                  },
                  "program_schema": null,
                  "program_status": "Pending",
                  "program_status_since": "1970-01-01T00:00:00Z",
                  "program_version": 1,
                  "runtime_config": {
                    "cpu_profiler": false,
                    "max_buffering_delay_usecs": 0,
                    "min_batch_size_records": 0,
                    "min_storage_bytes": null,
                    "resources": {
                      "cpu_cores_max": null,
                      "cpu_cores_min": null,
                      "memory_mb_max": null,
                      "memory_mb_min": null,
                      "storage_class": null,
                      "storage_mb_max": null
                    },
                    "storage": false,
                    "tracing": false,
                    "tracing_endpoint_jaeger": "",
                    "workers": 16
                  },
                  "version": 1
                }
              }
            }
          },
          "201": {
            "description": "Pipeline successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPipeline"
                },
                "example": {
                  "created_at": "1970-01-01T00:00:00Z",
                  "deployment_config": null,
                  "deployment_desired_status": "Shutdown",
                  "deployment_error": null,
                  "deployment_location": null,
                  "deployment_status": "Shutdown",
                  "deployment_status_since": "1970-01-01T00:00:00Z",
                  "description": "Description of the example pipeline",
                  "id": "67e55044-10b1-426f-9247-bb680e5fe0c8",
                  "name": "example",
                  "program_binary_url": null,
                  "program_code": "CREATE TABLE table1 ( col1 INT );",
                  "program_config": {
                    "profile": "optimized"
                  },
                  "program_schema": null,
                  "program_status": "Pending",
                  "program_status_since": "1970-01-01T00:00:00Z",
                  "program_version": 1,
                  "runtime_config": {
                    "cpu_profiler": false,
                    "max_buffering_delay_usecs": 0,
                    "min_batch_size_records": 0,
                    "min_storage_bytes": null,
                    "resources": {
                      "cpu_cores_max": null,
                      "cpu_cores_min": null,
                      "memory_mb_max": null,
                      "memory_mb_min": null,
                      "storage_class": null,
                      "storage_mb_max": null
                    },
                    "storage": false,
                    "tracing": false,
                    "tracing_endpoint_jaeger": "",
                    "workers": 16
                  },
                  "version": 1
                }
              }
            }
          },
          "409": {
            "description": "Cannot rename pipeline as the name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": null,
                  "error_code": "DuplicateName",
                  "message": "An entity with this name already exists"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Pipelines"
        ],
        "summary": "DELETE: delete an existing pipeline.",
        "operationId": "delete_pipeline",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline successfully deleted"
          },
          "400": {
            "description": "Pipeline is not shutdown",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "current_status": "Running",
                    "desired_status": "Running",
                    "error": "Cannot delete a running pipeline. Shutdown the pipeline first by invoking the '/shutdown' endpoint.",
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0",
                    "requested_status": null
                  },
                  "error_code": "IllegalPipelineStateTransition",
                  "message": "Action is not applicable in the current state of the pipeline: Cannot delete a running pipeline. Shutdown the pipeline first by invoking the '/shutdown' endpoint."
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Pipelines"
        ],
        "summary": "PATCH: (partially) update existing pipeline.",
        "operationId": "patch_pipeline",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchPipeline"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pipeline successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedPipeline"
                },
                "example": {
                  "created_at": "1970-01-01T00:00:00Z",
                  "deployment_config": null,
                  "deployment_desired_status": "Shutdown",
                  "deployment_error": null,
                  "deployment_location": null,
                  "deployment_status": "Shutdown",
                  "deployment_status_since": "1970-01-01T00:00:00Z",
                  "description": "Description of the example pipeline",
                  "id": "67e55044-10b1-426f-9247-bb680e5fe0c8",
                  "name": "example",
                  "program_binary_url": null,
                  "program_code": "CREATE TABLE table1 ( col1 INT );",
                  "program_config": {
                    "profile": "optimized"
                  },
                  "program_schema": null,
                  "program_status": "Pending",
                  "program_status_since": "1970-01-01T00:00:00Z",
                  "program_version": 1,
                  "runtime_config": {
                    "cpu_profiler": false,
                    "max_buffering_delay_usecs": 0,
                    "min_batch_size_records": 0,
                    "min_storage_bytes": null,
                    "resources": {
                      "cpu_cores_max": null,
                      "cpu_cores_min": null,
                      "memory_mb_max": null,
                      "memory_mb_min": null,
                      "storage_class": null,
                      "storage_mb_max": null
                    },
                    "storage": false,
                    "tracing": false,
                    "tracing_endpoint_jaeger": "",
                    "workers": 16
                  },
                  "version": 1
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/dump_profile": {
      "post": {
        "tags": [
          "Pipelines"
        ],
        "summary": "POST: initiate a profile dump on a running pipeline.",
        "operationId": "post_dump_profile",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Obtains a circuit performance profile.",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/egress/{table_name}": {
      "post": {
        "tags": [
          "HTTP input/output"
        ],
        "summary": "Subscribe to a stream of updates from a SQL view or table.",
        "description": "The pipeline responds with a continuous stream of changes to the specified\ntable or view, encoded using the format specified in the `?format=`\nparameter. Updates are split into `Chunk`s.\n\nThe pipeline continues sending updates until the client closes the\nconnection or the pipeline is shut down.\n\nThis API is a POST instead of a GET, because when performing neighborhood\nqueries (query='neighborhood'), the call expects a request body which\ncontains, among other things, a full row to execute a neighborhood search\naround. A row can be quite large and is not appropriate as a query\nparameter.",
        "operationId": "http_output",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_name",
            "in": "path",
            "description": "SQL table name. Unquoted SQL names have to be capitalized. Quoted SQL names have to exactly match the case from the SQL program.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Output data format, e.g., 'csv' or 'json'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Query to execute on the table. Must be one of 'table', 'neighborhood', or 'quantiles'. The default value is 'table'",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OutputQuery"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Output mode. Must be one of 'watch' or 'snapshot'. The default value is 'watch'",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EgressMode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "quantiles",
            "in": "query",
            "description": "For 'quantiles' queries: the number of quantiles to output. The default value is 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "array",
            "in": "query",
            "description": "Set to `true` to group updates in this stream into JSON arrays (used in conjunction with `format=json`). The default value is `false`",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "backpressure",
            "in": "query",
            "description": "Apply backpressure on the pipeline when the HTTP client cannot receive data fast enough.\n        When this flag is set to false (the default), the HTTP connector drops data chunks if the client is not keeping up with its output.  This prevents a slow HTTP client from slowing down the entire pipeline.\n        When the flag is set to true, the connector waits for the client to receive each chunk and blocks the pipeline if the client cannot keep up.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "When the `query` parameter is set to 'neighborhood', the body of the request must contain a neighborhood specification.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NeighborhoodQuery"
                  }
                ],
                "nullable": true
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Connection to the endpoint successfully established. The body of the response contains a stream of data chunks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chunk"
                }
              }
            }
          },
          "400": {
            "description": "Unknown data format specified in the '?format=' argument.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Specified table or view does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "410": {
            "description": "Pipeline is not currently running because it has been shutdown or not yet started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "PipelineShutdown",
                  "message": "Pipeline 2e79afe1-ff4d-44d3-af5f-9397de7746c0 is not currently running."
                }
              }
            }
          },
          "500": {
            "description": "Request failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/ingress/{table_name}": {
      "post": {
        "tags": [
          "HTTP input/output"
        ],
        "summary": "Push data to a SQL table.",
        "description": "The client sends data encoded using the format specified in the `?format=`\nparameter as a body of the request.  The contents of the data must match\nthe SQL table schema specified in `table_name`\n\nThe pipeline ingests data as it arrives without waiting for the end of\nthe request.  Successful HTTP response indicates that all data has been\ningested successfully.",
        "operationId": "http_input",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table_name",
            "in": "path",
            "description": "SQL table name. Unquoted SQL names have to be capitalized. Quoted SQL names have to exactly match the case from the SQL program.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "When `true`, push data to the pipeline even if the pipeline is paused. The default value is `false`",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Input data format, e.g., 'csv' or 'json'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "array",
            "in": "query",
            "description": "Set to `true` if updates in this stream are packaged into JSON arrays (used in conjunction with `format=json`). The default values is `false`.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "update_format",
            "in": "query",
            "description": "JSON data change event format (used in conjunction with `format=json`).  The default value is 'insert_delete'.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/JsonUpdateFormat"
                }
              ],
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Contains the new input data in CSV.",
          "content": {
            "text/csv": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Data successfully delivered to the pipeline."
          },
          "400": {
            "description": "Error parsing input data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Pipeline is not currently running because it has been shutdown or not yet started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "PipelineShutdown",
                  "message": "Pipeline 2e79afe1-ff4d-44d3-af5f-9397de7746c0 is not currently running."
                }
              }
            }
          },
          "500": {
            "description": "Request failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/input_endpoints/{endpoint_name}/{action}": {
      "post": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Change the desired state of an input endpoint.",
        "description": "The following values of the `action` argument are accepted by this endpoint:\n\n- 'start': Start processing data.\n- 'pause': Pause the pipeline.",
        "operationId": "input_endpoint_action",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endpoint_name",
            "in": "path",
            "description": "Input endpoint name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "path",
            "description": "Endpoint action [start, pause]",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Request accepted."
          },
          "404": {
            "description": "Specified endpoint does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/profile": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "GET: retrieve the dumped profile of a running pipeline.",
        "operationId": "get_profile",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline's heap usage profile as a gzipped protobuf that can be inspected by the pprof tool",
            "content": {
              "application/protobuf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/stats": {
      "get": {
        "tags": [
          "Pipelines"
        ],
        "summary": "GET: pipeline statistics (e.g., metrics, performance counters).",
        "operationId": "get_pipeline_stats",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline metrics retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    },
    "/v0/pipelines/{pipeline_name}/{action}": {
      "post": {
        "tags": [
          "Pipelines"
        ],
        "summary": "Change the desired runtime state of the pipeline.",
        "description": "The endpoint returns immediately after performing initial request validation\n(e.g., upon start that the program is compiled) and initiating the relevant\nprocedure (e.g., informing the runner or the already running pipeline).\nThe state changes completely asynchronously. On error, the pipeline\ntransitions to the `Failed` state. The user can monitor the current status\nof the pipeline by polling the `GET /pipelines` and\n`GET /pipelines/{pipeline_name}` endpoint.\n\nThe following values of the `action` argument are accepted:\n- `start`: Start the pipeline (state must be shutdown)\n- `pause`: Pause the pipeline (state must be either shutdown or running)\n- `resume`: Resume (unpause) the pipeline (state must be paused)\n- `shutdown`: Terminate the pipeline\n\nMore information:\n- State model in [`PipelineStatus`] documentation",
        "operationId": "post_pipeline_action",
        "parameters": [
          {
            "name": "pipeline_name",
            "in": "path",
            "description": "Unique pipeline name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "path",
            "description": "Pipeline action (one of: start, pause, resume, shutdown)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Action accepted and is being performed"
          },
          "400": {
            "description": "Unable to accept action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Illegal action": {
                    "description": "Action is not applicable in the current state",
                    "value": {
                      "details": {
                        "current_status": "ShuttingDown",
                        "desired_status": "Shutdown",
                        "error": "Cannot restart the pipeline while it is shutting down. Wait for the shutdown to complete before starting a new instance of the pipeline.",
                        "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0",
                        "requested_status": "Running"
                      },
                      "error_code": "IllegalPipelineStateTransition",
                      "message": "Action is not applicable in the current state of the pipeline: Cannot restart the pipeline while it is shutting down. Wait for the shutdown to complete before starting a new instance of the pipeline."
                    }
                  },
                  "Program has compilation errors": {
                    "description": "Pipeline program compilation has errors",
                    "value": {
                      "details": null,
                      "error_code": "ProgramFailedToCompile",
                      "message": "The program did not compile successfully"
                    }
                  },
                  "Program not compiled": {
                    "description": "Pipeline program has not (yet) been compiled",
                    "value": {
                      "details": null,
                      "error_code": "ProgramNotYetCompiled",
                      "message": "The program hasn't been compiled yet"
                    }
                  },
                  "Unknown action": {
                    "description": "Invalid action specified",
                    "value": {
                      "details": {
                        "action": "dance"
                      },
                      "error_code": "InvalidPipelineAction",
                      "message": "Invalid pipeline action 'dance'; valid actions are: 'deploy', 'start', 'pause', or 'shutdown'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pipeline with that name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "details": {
                    "pipeline_id": "2e79afe1-ff4d-44d3-af5f-9397de7746c0"
                  },
                  "error_code": "UnknownPipeline",
                  "message": "Unknown pipeline id '2e79afe1-ff4d-44d3-af5f-9397de7746c0'"
                }
              }
            }
          }
        },
        "security": [
          {
            "JSON web token (JWT) or API key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiKeyDescr": {
        "type": "object",
        "description": "API key descriptor.",
        "required": [
          "id",
          "name",
          "scopes"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ApiKeyId"
          },
          "name": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiPermission"
            }
          }
        }
      },
      "ApiKeyId": {
        "type": "string",
        "format": "uuid",
        "description": "API key identifier."
      },
      "ApiPermission": {
        "type": "string",
        "description": "Permission types for invoking API endpoints.",
        "enum": [
          "Read",
          "Write"
        ]
      },
      "AuthProvider": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "AwsCognito"
            ],
            "properties": {
              "AwsCognito": {
                "$ref": "#/components/schemas/ProviderAwsCognito"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "GoogleIdentity"
            ],
            "properties": {
              "GoogleIdentity": {
                "$ref": "#/components/schemas/ProviderGoogleIdentity"
              }
            }
          }
        ]
      },
      "ColumnType": {
        "type": "object",
        "description": "A SQL column type description.\n\nMatches the Calcite JSON format.",
        "required": [
          "nullable"
        ],
        "properties": {
          "component": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColumnType"
              }
            ],
            "nullable": true
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "description": "The fields of the type (if available).\n\nFor example this would specify the fields of a `CREATE TYPE` construct.\n\n```sql\nCREATE TYPE person_typ AS (\nfirstname       VARCHAR(30),\nlastname        VARCHAR(30),\naddress         ADDRESS_TYP\n);\n```\n\nWould lead to the following `fields` value:\n\n```sql\n[\nColumnType { name: \"firstname, ... },\nColumnType { name: \"lastname\", ... },\nColumnType { name: \"address\", fields: [ ... ] }\n]\n```",
            "nullable": true
          },
          "key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColumnType"
              }
            ],
            "nullable": true
          },
          "nullable": {
            "type": "boolean",
            "description": "Does the type accept NULL values?"
          },
          "precision": {
            "type": "integer",
            "format": "int64",
            "description": "Precision of the type.\n\n# Examples\n- `VARCHAR` sets precision to `-1`.\n- `VARCHAR(255)` sets precision to `255`.\n- `BIGINT`, `DATE`, `FLOAT`, `DOUBLE`, `GEOMETRY`, etc. sets precision\nto None\n- `TIME`, `TIMESTAMP` set precision to `0`.",
            "nullable": true
          },
          "scale": {
            "type": "integer",
            "format": "int64",
            "description": "The scale of the type.\n\n# Example\n- `DECIMAL(1,2)` sets scale to `2`.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SqlType"
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ColumnType"
              }
            ],
            "nullable": true
          }
        }
      },
      "CompilationProfile": {
        "type": "string",
        "description": "Enumeration of possible compilation profiles that can be passed to the Rust compiler\nas an argument via `cargo build --profile <>`. A compilation profile affects among\nother things the compilation speed (how long till the program is ready to be run)\nand runtime speed (the performance while running).",
        "enum": [
          "dev",
          "unoptimized",
          "optimized"
        ]
      },
      "Demo": {
        "type": "object",
        "required": [
          "title",
          "description",
          "prefix",
          "steps"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the demo."
          },
          "prefix": {
            "type": "string",
            "description": "Demo prefix prepended to each of the entities."
          },
          "steps": {
            "type": "array",
            "items": {},
            "description": "The steps which define the entities to create."
          },
          "title": {
            "type": "string",
            "description": "Title of the demo."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Information returned by REST API endpoints on error.",
        "required": [
          "message",
          "error_code",
          "details"
        ],
        "properties": {
          "details": {
            "type": "object",
            "description": "Detailed error metadata.\nThe contents of this field is determined by `error_code`."
          },
          "error_code": {
            "type": "string",
            "description": "Error code is a string that specifies this error type.",
            "example": "UnknownInputFormat"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message.",
            "example": "Unknown input format 'xml'."
          }
        }
      },
      "ExtendedPipelineDescr": {
        "type": "object",
        "description": "Pipeline descriptor which besides the basic fields in direct regular control of the user\nalso has all additional fields generated and maintained by the back-end.",
        "required": [
          "id",
          "name",
          "description",
          "version",
          "created_at",
          "runtime_config",
          "program_code",
          "program_config",
          "program_version",
          "program_status",
          "program_status_since",
          "deployment_status",
          "deployment_status_since",
          "deployment_desired_status"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the pipeline was originally created."
          },
          "deployment_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineConfig"
              }
            ],
            "nullable": true
          },
          "deployment_desired_status": {
            "$ref": "#/components/schemas/PipelineStatus"
          },
          "deployment_error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorResponse"
              }
            ],
            "nullable": true
          },
          "deployment_location": {
            "type": "string",
            "description": "Location where the pipeline can be reached at runtime.\ne.g., a TCP port number or a URI.",
            "nullable": true
          },
          "deployment_status": {
            "$ref": "#/components/schemas/PipelineStatus"
          },
          "deployment_status_since": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the pipeline was assigned its current status\nof the pipeline."
          },
          "description": {
            "type": "string",
            "description": "Pipeline description."
          },
          "id": {
            "$ref": "#/components/schemas/PipelineId"
          },
          "name": {
            "type": "string",
            "description": "Pipeline name."
          },
          "program_binary_url": {
            "type": "string",
            "description": "URL where to download the program binary from.\nTODO: should this be in here or not?",
            "nullable": true
          },
          "program_code": {
            "$ref": "#/components/schemas/T"
          },
          "program_config": {
            "$ref": "#/components/schemas/ProgramConfig"
          },
          "program_schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramSchema"
              }
            ],
            "nullable": true
          },
          "program_status": {
            "$ref": "#/components/schemas/ProgramStatus"
          },
          "program_status_since": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the current program status was set."
          },
          "program_version": {
            "$ref": "#/components/schemas/Version"
          },
          "runtime_config": {
            "$ref": "#/components/schemas/RuntimeConfig"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        }
      },
      "Field": {
        "type": "object",
        "description": "A SQL field.\n\nMatches the SQL compiler JSON format.",
        "required": [
          "name",
          "columntype"
        ],
        "properties": {
          "case_sensitive": {
            "type": "boolean"
          },
          "columntype": {
            "$ref": "#/components/schemas/ColumnType"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IntervalUnit": {
        "type": "string",
        "description": "The specified units for SQL Interval types.\n\n`INTERVAL 1 DAY`, `INTERVAL 1 DAY TO HOUR`, `INTERVAL 1 DAY TO MINUTE`,\nwould yield `Day`, `DayToHour`, `DayToMinute`, as the `IntervalUnit` respectively.",
        "enum": [
          "DAY",
          "DAYTOHOUR",
          "DAYTOMINUTE",
          "DAYTOSECOND",
          "HOUR",
          "HOURTOMINUTE",
          "HOURTOSECOND",
          "MINUTE",
          "MINUTETOSECOND",
          "MONTH",
          "SECOND",
          "YEAR",
          "YEARTOMONTH"
        ]
      },
      "ListPipelinesQueryParameters": {
        "type": "object",
        "description": "Query parameters for GET the list of pipelines.",
        "properties": {
          "code": {
            "type": "boolean",
            "description": "Whether to include program code in the response (default: `true`).\nPassing `false` reduces the response size, which is particularly handy\nwhen frequently monitoring the endpoint over low bandwidth connections."
          }
        }
      },
      "NewApiKeyRequest": {
        "type": "object",
        "description": "Request to create a new API key.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Key name.",
            "example": "my-api-key"
          }
        }
      },
      "NewApiKeyResponse": {
        "type": "object",
        "description": "Response to a successful API key creation.",
        "required": [
          "api_key_id",
          "name",
          "api_key"
        ],
        "properties": {
          "api_key": {
            "type": "string",
            "description": "Generated API key. There is no way to\nretrieve this key again from the\npipeline-manager, so store it securely.",
            "example": "apikey:v5y5QNtlPNVMwkmNjKwFU8bbIu5lMge3yHbyddxAOdXlEo84SEoNn32DUhQaf1KLeI9aOOfnJjhQ1pYzMrU4wQXON6pm6BS7Zgzj46U2b8pwz1280vYBEtx41hiDBRP"
          },
          "api_key_id": {
            "$ref": "#/components/schemas/ApiKeyId"
          },
          "name": {
            "type": "string",
            "description": "API key name",
            "example": "my-api-key"
          }
        }
      },
      "OutputBufferConfig": {
        "type": "object",
        "properties": {
          "enable_output_buffer": {
            "type": "boolean",
            "description": "Enable output buffering.\n\nThe output buffering mechanism allows decoupling the rate at which the pipeline\npushes changes to the output transport from the rate of input changes.\n\nBy default, output updates produced by the pipeline are pushed directly to\nthe output transport. Some destinations may prefer to receive updates in fewer\nbigger batches. For instance, when writing Parquet files, producing\none bigger file every few minutes is usually better than creating\nsmall files every few milliseconds.\n\nTo achieve such input/output decoupling, users can enable output buffering by\nsetting the `enable_output_buffer` flag to `true`.  When buffering is enabled, output\nupdates produced by the pipeline are consolidated in an internal buffer and are\npushed to the output transport when one of several conditions is satisfied:\n\n* data has been accumulated in the buffer for more than `max_output_buffer_time_millis`\nmilliseconds.\n* buffer size exceeds `max_output_buffer_size_records` records.\n\nThis flag is `false` by default."
          },
          "max_output_buffer_size_records": {
            "type": "integer",
            "description": "Maximum number of updates to be kept in the output buffer.\n\nThis parameter bounds the maximal size of the buffer.\nNote that the size of the buffer is not always equal to the\ntotal number of updates output by the pipeline. Updates to the\nsame record can overwrite or cancel previous updates.\n\nBy default, the buffer can grow indefinitely until one of\nthe other output conditions is satisfied.\n\nNOTE: this configuration option requires the `enable_output_buffer` flag\nto be set.",
            "minimum": 0
          },
          "max_output_buffer_time_millis": {
            "type": "integer",
            "description": "Maximum time in milliseconds data is kept in the output buffer.\n\nBy default, data is kept in the buffer indefinitely until one of\nthe other output conditions is satisfied.  When this option is\nset the buffer will be flushed at most every\n`max_output_buffer_time_millis` milliseconds.\n\nNOTE: this configuration option requires the `enable_output_buffer` flag\nto be set.",
            "minimum": 0
          }
        }
      },
      "OutputEndpointConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConnectorConfig"
          },
          {
            "type": "object",
            "required": [
              "stream"
            ],
            "properties": {
              "stream": {
                "type": "string",
                "description": "The name of the output stream of the circuit that this endpoint is\nconnected to."
              }
            }
          }
        ],
        "description": "Describes an output connector configuration"
      },
      "PatchPipeline": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "program_code": {
            "type": "string",
            "nullable": true
          },
          "program_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProgramConfig"
              }
            ],
            "nullable": true
          },
          "runtime_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuntimeConfig"
              }
            ],
            "nullable": true
          }
        }
      },
      "PipelineDescr": {
        "type": "object",
        "description": "Pipeline descriptor.",
        "required": [
          "name",
          "description",
          "runtime_config",
          "program_code",
          "program_config"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Pipeline description."
          },
          "name": {
            "type": "string",
            "description": "Pipeline name."
          },
          "program_code": {
            "type": "string",
            "description": "Program SQL code."
          },
          "program_config": {
            "$ref": "#/components/schemas/ProgramConfig"
          },
          "runtime_config": {
            "$ref": "#/components/schemas/RuntimeConfig"
          }
        }
      },
      "PipelineId": {
        "type": "string",
        "format": "uuid",
        "description": "Pipeline identifier."
      },
      "PipelineStatus": {
        "type": "string",
        "description": "Pipeline status.\n\nThis type represents the state of the pipeline tracked by the pipeline\nrunner and observed by the API client via the `GET /pipeline` endpoint.\n\n### The lifecycle of a pipeline\n\nThe following automaton captures the lifecycle of the pipeline.  Individual\nstates and transitions of the automaton are described below.\n\n* In addition to the transitions shown in the diagram, all states have an\nimplicit \"forced shutdown\" transition to the `Shutdown` state.  This\ntransition is triggered when the pipeline runner is unable to communicate\nwith the pipeline and thereby forces a shutdown.\n\n* States labeled with the hourglass symbol (⌛) are **timed** states.  The\nautomaton stays in timed state until the corresponding operation completes\nor until the runner performs a forced shutdown of the pipeline after a\npre-defined timeout period.\n\n* State transitions labeled with API endpoint names (`/deploy`, `/start`,\n`/pause`, `/shutdown`) are triggered by invoking corresponding endpoint,\ne.g., `POST /v0/pipelines/{pipeline_id}/start`.\n\n```text\nShutdown◄────┐\n│         │\n/deploy│         │\n│   ⌛ShuttingDown\n▼         ▲\n⌛Provisioning    │\n│         │\nProvisioned        │         │\n▼         │/shutdown\n⌛Initializing    │\n│         │\n┌────────┴─────────┴─┐\n│        ▼           │\n│      Paused        │\n│      │    ▲        │\n│/start│    │/pause  │\n│      ▼    │        │\n│     Running        │\n└──────────┬─────────┘\n│\n▼\nFailed\n```\n\n### Desired and actual status\n\nWe use the desired state model to manage the lifecycle of a pipeline.\nIn this model, the pipeline has two status attributes associated with\nit at runtime: the **desired** status, which represents what the user\nwould like the pipeline to do, and the **current** status, which\nrepresents the actual state of the pipeline.  The pipeline runner\nservice continuously monitors both fields and steers the pipeline\ntowards the desired state specified by the user.\nOnly three of the states in the pipeline automaton above can be\nused as desired statuses: `Paused`, `Running`, and `Shutdown`.\nThese statuses are selected by invoking REST endpoints shown\nin the diagram.\n\nThe user can monitor the current state of the pipeline via the\n`/status` endpoint, which returns an object of type `Pipeline`.\nIn a typical scenario, the user first sets\nthe desired state, e.g., by invoking the `/deploy` endpoint, and\nthen polls the `GET /pipeline` endpoint to monitor the actual status\nof the pipeline until its `state.current_status` attribute changes\nto \"paused\" indicating that the pipeline has been successfully\ninitialized, or \"failed\", indicating an error.",
        "enum": [
          "Shutdown",
          "Provisioning",
          "Initializing",
          "Paused",
          "Running",
          "ShuttingDown",
          "Failed"
        ]
      },
      "ProgramConfig": {
        "type": "object",
        "description": "Program configuration.",
        "properties": {
          "profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompilationProfile"
              }
            ],
            "nullable": true
          }
        }
      },
      "ProgramSchema": {
        "type": "object",
        "description": "A struct containing the tables (inputs) and views for a program.\n\nParse from the JSON data-type of the DDL generated by the SQL compiler.",
        "required": [
          "inputs",
          "outputs"
        ],
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            }
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            }
          }
        }
      },
      "ProgramStatus": {
        "oneOf": [
          {
            "type": "string",
            "description": "Compilation request received from the user; program has been placed\nin the queue.",
            "enum": [
              "Pending"
            ]
          },
          {
            "type": "string",
            "description": "Compilation of SQL -> Rust in progress.",
            "enum": [
              "CompilingSql"
            ]
          },
          {
            "type": "string",
            "description": "Compiling Rust -> executable in progress.",
            "enum": [
              "CompilingRust"
            ]
          },
          {
            "type": "string",
            "description": "Compilation succeeded.",
            "enum": [
              "Success"
            ]
          },
          {
            "type": "object",
            "required": [
              "SqlError"
            ],
            "properties": {
              "SqlError": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SqlCompilerMessage"
                },
                "description": "SQL compiler returned an error."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "RustError"
            ],
            "properties": {
              "RustError": {
                "type": "string",
                "description": "Rust compiler returned an error."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "SystemError"
            ],
            "properties": {
              "SystemError": {
                "type": "string",
                "description": "System/OS returned an error when trying to invoke commands."
              }
            }
          }
        ],
        "description": "Program compilation status."
      },
      "ProviderAwsCognito": {
        "type": "object",
        "required": [
          "jwk_uri",
          "login_url",
          "logout_url"
        ],
        "properties": {
          "jwk_uri": {
            "type": "string"
          },
          "login_url": {
            "type": "string"
          },
          "logout_url": {
            "type": "string"
          }
        }
      },
      "ProviderGoogleIdentity": {
        "type": "object",
        "required": [
          "jwk_uri",
          "client_id"
        ],
        "properties": {
          "client_id": {
            "type": "string"
          },
          "jwk_uri": {
            "type": "string"
          }
        }
      },
      "Relation": {
        "type": "object",
        "description": "A SQL table or view. It has a name and a list of fields.\n\nMatches the Calcite JSON format.",
        "required": [
          "name",
          "fields"
        ],
        "properties": {
          "case_sensitive": {
            "type": "boolean"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Field"
            }
          },
          "materialized": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "SqlCompilerMessage": {
        "type": "object",
        "description": "A SQL compiler error.\n\nThe SQL compiler returns a list of errors in the following JSON format if\nit's invoked with the `-je` option.\n\n```ignore\n[ {\n\"startLineNumber\" : 14,\n\"startColumn\" : 13,\n\"endLineNumber\" : 14,\n\"endColumn\" : 13,\n\"warning\" : false,\n\"errorType\" : \"Error parsing SQL\",\n\"message\" : \"Encountered \\\"<EOF>\\\" at line 14, column 13.\"\n} ]\n```",
        "required": [
          "startLineNumber",
          "startColumn",
          "endLineNumber",
          "endColumn",
          "warning",
          "errorType",
          "message"
        ],
        "properties": {
          "endColumn": {
            "type": "integer",
            "minimum": 0
          },
          "endLineNumber": {
            "type": "integer",
            "minimum": 0
          },
          "errorType": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "startColumn": {
            "type": "integer",
            "minimum": 0
          },
          "startLineNumber": {
            "type": "integer",
            "minimum": 0
          },
          "warning": {
            "type": "boolean"
          }
        }
      },
      "SqlType": {
        "oneOf": [
          {
            "type": "string",
            "description": "SQL `BOOLEAN` type.",
            "enum": [
              "BOOLEAN"
            ]
          },
          {
            "type": "string",
            "description": "SQL `TINYINT` type.",
            "enum": [
              "TINYINT"
            ]
          },
          {
            "type": "string",
            "description": "SQL `SMALLINT` or `INT2` type.",
            "enum": [
              "SMALLINT"
            ]
          },
          {
            "type": "string",
            "description": "SQL `INTEGER`, `INT`, `SIGNED`, `INT4` type.",
            "enum": [
              "INTEGER"
            ]
          },
          {
            "type": "string",
            "description": "SQL `BIGINT` or `INT64` type.",
            "enum": [
              "BIGINT"
            ]
          },
          {
            "type": "string",
            "description": "SQL `REAL` or `FLOAT4` or `FLOAT32` type.",
            "enum": [
              "REAL"
            ]
          },
          {
            "type": "string",
            "description": "SQL `DOUBLE` or `FLOAT8` or `FLOAT64` type.",
            "enum": [
              "DOUBLE"
            ]
          },
          {
            "type": "string",
            "description": "SQL `DECIMAL` or `DEC` or `NUMERIC` type.",
            "enum": [
              "DECIMAL"
            ]
          },
          {
            "type": "string",
            "description": "SQL `CHAR(n)` or `CHARACTER(n)` type.",
            "enum": [
              "CHAR"
            ]
          },
          {
            "type": "string",
            "description": "SQL `VARCHAR`, `CHARACTER VARYING`, `TEXT`, or `STRING` type.",
            "enum": [
              "VARCHAR"
            ]
          },
          {
            "type": "string",
            "description": "SQL `BINARY(n)` type.",
            "enum": [
              "BINARY"
            ]
          },
          {
            "type": "string",
            "description": "SQL `VARBINARY` or `BYTEA` type.",
            "enum": [
              "VARBINARY"
            ]
          },
          {
            "type": "string",
            "description": "SQL `TIME` type.",
            "enum": [
              "TIME"
            ]
          },
          {
            "type": "string",
            "description": "SQL `DATE` type.",
            "enum": [
              "DATE"
            ]
          },
          {
            "type": "string",
            "description": "SQL `TIMESTAMP` type.",
            "enum": [
              "TIMESTAMP"
            ]
          },
          {
            "type": "object",
            "required": [
              "Interval"
            ],
            "properties": {
              "Interval": {
                "$ref": "#/components/schemas/IntervalUnit"
              }
            }
          },
          {
            "type": "string",
            "description": "SQL `ARRAY` type.",
            "enum": [
              "ARRAY"
            ]
          },
          {
            "type": "string",
            "description": "A complex SQL struct type (`CREATE TYPE x ...`).",
            "enum": [
              "STRUCT"
            ]
          },
          {
            "type": "string",
            "description": "SQL `MAP` type.",
            "enum": [
              "MAP"
            ]
          },
          {
            "type": "string",
            "description": "SQL `NULL` type.",
            "enum": [
              "NULL"
            ]
          }
        ],
        "description": "The available SQL types as specified in `CREATE` statements."
      },
      "Version": {
        "type": "integer",
        "format": "int64",
        "description": "Version number."
      }
    },
    "securitySchemes": {
      "JSON web token (JWT) or API key": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Use a JWT token obtained via an OAuth2/OIDC\n                               login workflow or an API key obtained via\n                               the `/v0/api-keys` endpoint."
      }
    }
  },
  "tags": [
    {
      "name": "Manager",
      "description": "Configure system behavior"
    },
    {
      "name": "Pipelines",
      "description": "Manage pipelines"
    }
  ]
}